#!/usr/bin/env node
const fs = require('fs');
const exists = fs.existsSync;
const join = require('path').join;
const program = require('commander');
const hbs = require('handlebars');
const resolve = require('path').resolve;
const packageJson = require('../package.json');

var templateFiles = [
  'config.yml',
  'README.md'
];

/**
 * Usage.
 */

program
  .option('-p, --project <project>', 'the name (slug) of project')
  .usage('<project> [month, year]');

/**
 * Help.
 */

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # create a new project from template, with optional month and year setting.');
  console.log('    $ machinist my-project-name 7 2017');
  console.log();
});

/**
 * Help.
 */

program.parse(process.argv);
if (program.args.length < 1) {
  return program.help();
}

/**
 * Padding.
 */

console.log();
process.on('exit', function(){
  console.log('.........');
  console.log('To init a fresh project: npm run git-init');
  console.log('.........');
});

/**
 * Settings.
 */

const projectName = program.args[0];
let month = program.args[1] || new Date().getMonth() + 1;

if (month.toString().length == 1) {
    month = '0' + month;
}

const year = program.args[2] || new Date().getYear() + 1900;
const data = { projectName, month, year };

console.log('data:', data);

/**
 * Modify files
 */

function compileTemplate(data, source) {
  const template = hbs.compile(source);
  return template(data);
}

templateFiles.forEach(function (file) {
  if (exists(file)) {
    console.log('found:', file);
    const fileText = fs.readFileSync(file, 'utf8');
    const compiled = compileTemplate(data, fileText);
    fs.writeFileSync(file, compiled);
    console.log(file, '...modified');
  }
});

packageJson.name = `Machinist-${data.projectName}`;
fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2) + '\n');
