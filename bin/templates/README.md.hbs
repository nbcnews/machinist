[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)

# Machinist - {{projectName}}

*If making content edits is your priority look at [./CONTRIBUTING.md](CONTRIBUTING.md)*

Machinist uses:

- [Metalsmith](http://www.metalsmith.io/)
- [Handlebars](http://handlebarsjs.com/)
- [StandardJS](https://github.com/feross/standard)
- [Sass](https://github.com/sass/sass)
- [Stylelint Standard](https://github.com/stylelint/stylelint-config-standard)
- [Webpack2](https://github.com/ianrose/metalsmith-webpack2)
- [Babel Preset es2015](https://github.com/babel/babel/tree/master/packages/babel-preset-es2015)
- [Babel Preset Stage 0](https://github.com/babel/babel/tree/master/packages/babel-preset-stage-0)
- [Autoprefixer](https://github.com/postcss/autoprefixer)
- [HTMLHint](https://github.com/yaniswang/HTMLHint)
- [Editorconfig](http://editorconfig.org/)
- [ai2html](http://ai2html.org/)
- [ArchieML](http://archieml.org/)

## Features

- Common storytelling components
- Add structured data globally in JSON or YAML in the `./src/globaldata/`
- Add structured data to a specific Markdown file by adding in the frontmatter `model: file_name.json`, with `file_name.json` living in `./src/models/`
- Google Doc to JSON using ArchieML
- Dropbox Paper to JSON using ArchieML
- An ai2html pipeline
- Boilerplate CSS/Markup for story components

## Requirements

- [node.js](https://nodejs.org/en/)

## Setup

### 1. Clone

Clone the repo.

### 2. Install Dependencies

This project recommends managing Node versions via [nvm](https://github.com/creationix/nvm).

```sh
nvm use
npm install
```

#### Dropbox Paper Data

Create a new Paper document.

Get the file ID from the URL. It should look like: `S7sSIlM2E0g6p3OXhhts4`

To ingest the Dropbox Paper you will need to have access to it. [Generate an access token for your own account](https://blogs.dropbox.com/developers/2014/05/generate-an-access-token-for-your-own-account/) and add the token to `./env`.

```sh
npm run doc-ingest
```

#### Google Doc Data

Create a new doc or optionally duplicate the [example project](https://docs.google.com/document/d/1bj563rIzGL95pvfWORPk-4ukUhRU-GYR55QGx9emyjY/edit) on Google Docs.

Get the file ID from the URL. It should look like: `1bj563rIzGL95pvfWORPk-4ukUhRU-GYR55QGx9emyjY`. Add that as the value for `fileId` in `googleDocJson` in `config.json`.

To ingest the Google doc you will need to have access to it on Google. Either it's your doc or it's been shared with you. You will need to set up your credentials [following this helpful guide](https://github.com/bradoyler/googledoc-to-json#getting-credentials). Add the Google Docs configuration to `./env`.

To ingest the latest content from the Google Doc.

```sh
npm run doc-ingest
```

#### Publishing

To push to s3 put your s3 credientials in `./env`

## How to use

### Develop

Runs your project locally at `localhost:3000` with BrowserSync. Edit contents of `./layouts`, `./lib`, `./partials`, and `./src`.

```sh
npm run dev
```

Develop with Metalsmith debugging.

```sh
npm run debug
```

#### ai2html

Can be changed, but by default:

- Duplicate or Rename `assets/##-ai2html-machinist-template.ai` for your graphic
- Install `ai2html.jsx` for Illustrator. [Docs](http://ai2html.org/#how-to-install-ai2html)
- Uncomment `ai2html-resizer.js` in `src/scripts/main.js`
- If using Google Doc for data, use the following ArchieML to place the graphic in the body

```
{.ai2html}
title: Optional title
subtitle: Optional subtitle
fileName: name-of-the-ai2html.html
caption: Optional caption
source: Optional Source
{}
```

- Design and Develop
- `npm run publish` will update ai2html image paths and rev assets

### Build

Generates your dist to be deployed in the folder `./www`.

```sh
npm run build
```

### Publish

Generates your dist be deployed and publishes the dist to s3.

```sh
npm run publish
```

### Lint

Lints your styles, scripts, and generted HTML.

```sh
npm run lint
```

## Publish assets

Publish static assets in the `cdnassets` folder, like images and videos, to the CDN

```sh
npm run publish:cdn
```

### Format

Fix lint auto-fixable errors in your styles and scripts.

```sh
npm run format
```
